name: Docker Image and Deploy

on:
  push:
    branches: [ "main" ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      deploy_type:
        description: '배포 타입 선택'
        required: true
        default: 'kubernetes'
        type: choice
        options:
          - kubernetes
          - ecs
          - ssh
          - heroku

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}
  DEPLOY_TYPE: ${{ inputs.deploy_type || 'kubernetes' }}
  KUBE_NAMESPACE: mcp-sse

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Kubernetes 배포
      - name: Install kubectl
        if: env.DEPLOY_TYPE == 'kubernetes'
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        if: env.DEPLOY_TYPE == 'kubernetes'
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml

      - name: Deploy to Kubernetes
        if: env.DEPLOY_TYPE == 'kubernetes'
        run: |
          kubectl set image deployment/mcp-sse-deployment mcp-sse=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} -n ${{ env.KUBE_NAMESPACE }}
          kubectl rollout status deployment/mcp-sse-deployment -n ${{ env.KUBE_NAMESPACE }}

      # AWS ECS 배포
      - name: Configure AWS credentials
        if: env.DEPLOY_TYPE == 'ecs'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to ECS
        if: env.DEPLOY_TYPE == 'ecs'
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --force-new-deployment

      # SSH 배포
      - name: Deploy via SSH
        if: env.DEPLOY_TYPE == 'ssh'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            docker stop mcp-sse || true
            docker rm mcp-sse || true
            docker run -d --name mcp-sse \
              -p 3000:3000 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      # Heroku 배포
      - name: Deploy to Heroku
        if: env.DEPLOY_TYPE == 'heroku'
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          usedocker: true

      - name: Clean up
        if: always() && env.DEPLOY_TYPE == 'kubernetes'
        run: rm -f kubeconfig.yaml 